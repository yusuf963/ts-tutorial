{
  "stats": {
    "suites": 5,
    "tests": 24,
    "passes": 24,
    "pending": 0,
    "failures": 0,
    "start": "2023-01-06T14:16:44.808Z",
    "end": "2023-01-06T14:16:44.817Z",
    "duration": 9,
    "testsRegistered": 24,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "c560465e-6e25-4d8b-8652-628d3bfc032c",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [
        {
          "title": "Should get the user id",
          "fullTitle": "Should get the user id",
          "timedOut": false,
          "duration": 0,
          "state": "passed",
          "speed": "fast",
          "pass": true,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "expect(getUserId(defaultUser)).to.deep.equal(1);",
          "err": {},
          "uuid": "da07cf70-96ca-45e6-aec6-651a0c69579f",
          "parentUUID": "c560465e-6e25-4d8b-8652-628d3bfc032c",
          "isHook": false,
          "skipped": false
        },
        {
          "title": "Should user has property of lastName",
          "fullTitle": "Should user has property of lastName",
          "timedOut": false,
          "duration": 0,
          "state": "passed",
          "speed": "fast",
          "pass": true,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "expect(user).to.have.property(\"lastName\");",
          "err": {},
          "uuid": "14806438-b603-41ca-a2f9-cc651b011711",
          "parentUUID": "c560465e-6e25-4d8b-8652-628d3bfc032c",
          "isHook": false,
          "skipped": false
        },
        {
          "title": "Should return a valid user",
          "fullTitle": "Should return a valid user",
          "timedOut": false,
          "duration": 1,
          "state": "passed",
          "speed": "fast",
          "pass": true,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "expect(user.id).to.be.a(\"number\");\nexpect(user.firstName).to.be.a(\"string\");\nexpect(user.lastName).to.be.a(\"string\");\nexpect(user.role).to.be.oneOf([\"super-admin\", \"admin\", \"user\", \"dw\"]);\nexpect(user.posts[0].id).to.be.a(\"number\");\nexpect(user.posts[0].title).to.be.a(\"string\");",
          "err": {},
          "uuid": "7f6285ef-d7f4-455a-939a-ae0c7ed7ce02",
          "parentUUID": "c560465e-6e25-4d8b-8652-628d3bfc032c",
          "isHook": false,
          "skipped": false
        },
        {
          "title": "Should return a valid user admin value",
          "fullTitle": "Should return a valid user admin value",
          "timedOut": false,
          "duration": 0,
          "state": "passed",
          "speed": "fast",
          "pass": true,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "expect(user.role).to.be.oneOf(['admin']);",
          "err": {},
          "uuid": "28fa1344-b6b6-499c-882f-c649f255012b",
          "parentUUID": "c560465e-6e25-4d8b-8652-628d3bfc032c",
          "isHook": false,
          "skipped": false
        },
        {
          "title": "should add two numbers",
          "fullTitle": "should add two numbers",
          "timedOut": false,
          "duration": 0,
          "state": "passed",
          "speed": "fast",
          "pass": true,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "const result = addNum(2, 3);\nexpect(result).to.equal(5);",
          "err": {},
          "uuid": "715702cd-bd69-483f-b39d-64083c537dcd",
          "parentUUID": "c560465e-6e25-4d8b-8652-628d3bfc032c",
          "isHook": false,
          "skipped": false
        },
        {
          "title": "should add two objects",
          "fullTitle": "should add two objects",
          "timedOut": false,
          "duration": 1,
          "state": "passed",
          "speed": "fast",
          "pass": true,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "const result = addObject({ name: 'bob' }, { age: 22 });\nexpect(result).to.deep.equal({ name: 'bob', age: 22 });",
          "err": {},
          "uuid": "d5e4be68-495b-4d05-b823-15754d35c125",
          "parentUUID": "c560465e-6e25-4d8b-8652-628d3bfc032c",
          "isHook": false,
          "skipped": false
        },
        {
          "title": "should add two arrays",
          "fullTitle": "should add two arrays",
          "timedOut": false,
          "duration": 0,
          "state": "passed",
          "speed": "fast",
          "pass": true,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "const result = joinArray2([1, 2], [3, 4]);\nexpect(result).to.deep.equal([1, 2, 3, 4]);",
          "err": {},
          "uuid": "004d16d5-9636-475b-899b-a44fd9ef61a9",
          "parentUUID": "c560465e-6e25-4d8b-8652-628d3bfc032c",
          "isHook": false,
          "skipped": false
        },
        {
          "title": "should return T type",
          "fullTitle": "should return T type",
          "timedOut": false,
          "duration": 0,
          "state": "passed",
          "speed": "fast",
          "pass": true,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "const result = joinArray2(['1', '2'], ['3', '4']);\nexpect(result).to.deep.equal(['1', '2', '3', '4']);",
          "err": {},
          "uuid": "7adea454-e40d-454d-8b56-32543fec0ad5",
          "parentUUID": "c560465e-6e25-4d8b-8652-628d3bfc032c",
          "isHook": false,
          "skipped": false
        },
        {
          "title": "should add two numbers",
          "fullTitle": "should add two numbers",
          "timedOut": false,
          "duration": 0,
          "state": "passed",
          "speed": "fast",
          "pass": true,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "const result = addTwoNumber({ first: 1, second: 2 });\nexpect(result).to.equal(3);",
          "err": {},
          "uuid": "47a32676-6bbd-4e7e-a2b7-0d57faa96e78",
          "parentUUID": "c560465e-6e25-4d8b-8652-628d3bfc032c",
          "isHook": false,
          "skipped": false
        },
        {
          "title": "Should work with just the first name",
          "fullTitle": "Should work with just the first name",
          "timedOut": false,
          "duration": 0,
          "state": "passed",
          "speed": "fast",
          "pass": true,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "const name = getName(\"Matt\");\nexpect(name).to.deep.equal(\"Matt\");",
          "err": {},
          "uuid": "e52cc76b-1df5-4a6a-8bfa-7ce1ee5a8720",
          "parentUUID": "c560465e-6e25-4d8b-8652-628d3bfc032c",
          "isHook": false,
          "skipped": false
        },
        {
          "title": "Should work with the first and last name",
          "fullTitle": "Should work with the first and last name",
          "timedOut": false,
          "duration": 0,
          "state": "passed",
          "speed": "fast",
          "pass": true,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "const name = getName(\"Matt\", \"Pocock\");\nexpect(name).to.deep.equal(\"Matt Pocock\");",
          "err": {},
          "uuid": "c55aa476-1fa1-4f25-aa34-e93fc63680a2",
          "parentUUID": "c560465e-6e25-4d8b-8652-628d3bfc032c",
          "isHook": false,
          "skipped": false
        },
        {
          "title": "Should work with the first and last name and ..arg",
          "fullTitle": "Should work with the first and last name and ..arg",
          "timedOut": false,
          "duration": 0,
          "state": "passed",
          "speed": "fast",
          "pass": true,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "const name = getName(\"Matt\", \"Pocock\", \"a\", \"b\", \"c\");\nassert.equal(name, \"Matt Pocock a,b,c\");",
          "err": {},
          "uuid": "1cfc772d-8597-435d-975d-c9862136292a",
          "parentUUID": "c560465e-6e25-4d8b-8652-628d3bfc032c",
          "isHook": false,
          "skipped": false
        },
        {
          "title": "Should work with just the first name",
          "fullTitle": "Should work with just the first name",
          "timedOut": false,
          "duration": 0,
          "state": "passed",
          "speed": "fast",
          "pass": true,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "const name = getName({\n    first: \"Matt\",\n});\nexpect(name).to.equal(\"Matt\");",
          "err": {},
          "uuid": "25e12f1c-7514-4a1b-a6bc-5125d82ccfb0",
          "parentUUID": "c560465e-6e25-4d8b-8652-628d3bfc032c",
          "isHook": false,
          "skipped": false
        },
        {
          "title": "Should work with the first and last name",
          "fullTitle": "Should work with the first and last name",
          "timedOut": false,
          "duration": 0,
          "state": "passed",
          "speed": "fast",
          "pass": true,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "const name = getName({\n    first: \"Matt\",\n    last: \"Pocock\",\n});\nexpect(name).to.equal(\"Matt Pocock\");",
          "err": {},
          "uuid": "7638d30c-0195-4b4c-b323-2bd2d7898701",
          "parentUUID": "c560465e-6e25-4d8b-8652-628d3bfc032c",
          "isHook": false,
          "skipped": false
        },
        {
          "title": "Should work with the first and last name using assert ",
          "fullTitle": "Should work with the first and last name using assert ",
          "timedOut": false,
          "duration": 0,
          "state": "passed",
          "speed": "fast",
          "pass": true,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "const name = getNameY({\n    first: \"Matt\",\n    last: \"Pocock\",\n});\nassert.equal(name, \"Matt Pocock\");",
          "err": {},
          "uuid": "f7729761-fabd-4730-879b-5e1762a01ce4",
          "parentUUID": "c560465e-6e25-4d8b-8652-628d3bfc032c",
          "isHook": false,
          "skipped": false
        }
      ],
      "suites": [
        {
          "uuid": "37322584-4d6f-47dd-86e1-0d90de01892a",
          "title": "Assign dynamic keys to object",
          "fullFile": "/Users/alchem01/dev/tutorials/typescript/ts-tutorial/src/assigningdynamicKeysToObject.ts",
          "file": "/src/assigningdynamicKeysToObject.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Should add values to the cache",
              "fullTitle": "Assign dynamic keys to object Should add values to the cache",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const cache = createCache();\ncache.add(\"123\", \"Matt\");\nexpect(cache.cache[\"123\"]).to.be.equal(\"Matt\");",
              "err": {},
              "uuid": "38212959-0707-4b6b-a93d-d07f334ec727",
              "parentUUID": "37322584-4d6f-47dd-86e1-0d90de01892a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should remove values from the cache",
              "fullTitle": "Assign dynamic keys to object Should remove values from the cache",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const cache = createCache();\ncache.add(\"123\", \"Matt\");\ncache.remove(\"123\");\nexpect(cache.cache[\"123\"]).to.be.equal(undefined);",
              "err": {},
              "uuid": "f9b5e110-8628-4f61-8c6e-3474b37cead7",
              "parentUUID": "37322584-4d6f-47dd-86e1-0d90de01892a",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "38212959-0707-4b6b-a93d-d07f334ec727",
            "f9b5e110-8628-4f61-8c6e-3474b37cead7"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "368b9607-16e8-430a-a3e0-93d580c1c4ca",
          "title": "Narrowing down union types",
          "fullFile": "/Users/alchem01/dev/tutorials/typescript/ts-tutorial/src/narrowingDownUnionTypes.ts",
          "file": "/src/narrowingDownUnionTypes.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Should return the amount when passed an object",
              "fullTitle": "Narrowing down union types Should return the amount when passed an object",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(coerceAmount({ amount: 20 })).to.be.equal(20);",
              "err": {},
              "uuid": "ce5933ae-a081-4244-a32b-1289ce9b13d0",
              "parentUUID": "368b9607-16e8-430a-a3e0-93d580c1c4ca",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should return the amount when passed a number",
              "fullTitle": "Narrowing down union types Should return the amount when passed a number",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(coerceAmount(20)).to.be.equal(20);",
              "err": {},
              "uuid": "92bb555e-a159-43b7-8af8-8767897a14e6",
              "parentUUID": "368b9607-16e8-430a-a3e0-93d580c1c4ca",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "ce5933ae-a081-4244-a32b-1289ce9b13d0",
            "92bb555e-a159-43b7-8af8-8767897a14e6"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "97dfff74-d607-495f-ba9c-b777cfad1f80",
          "title": "Passing Type Argument",
          "fullFile": "/Users/alchem01/dev/tutorials/typescript/ts-tutorial/src/passingTypeArguments.ts",
          "file": "/src/passingTypeArguments.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Should contain Jimi and Eric",
              "fullTitle": "Passing Type Argument Should contain Jimi and Eric",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(guitarists.has(\"Jimi Hendrix\")).to.equal(true);\nexpect(guitarists.has(\"Eric Clapton\")).to.equal(true);",
              "err": {},
              "uuid": "f9e1e3b9-fd84-46b8-819e-1a9b86848526",
              "parentUUID": "97dfff74-d607-495f-ba9c-b777cfad1f80",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should give a type error when you try to pass a non-string",
              "fullTitle": "Passing Type Argument Should give a type error when you try to pass a non-string",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "/*  // @ts-expect-error */\nguitarists.add(2);\nexpect(guitarists.has(2)).to.equal(true);",
              "err": {},
              "uuid": "7259dc31-58b7-4d60-921a-1a864348c22d",
              "parentUUID": "97dfff74-d607-495f-ba9c-b777cfad1f80",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should be typed as an array of strings",
              "fullTitle": "Passing Type Argument Should be typed as an array of strings",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const guitaristsAsArray = Array.from(guitarists);\nexpect(guitaristsAsArray).to.deep.equal([\n    \"Jimi Hendrix\",\n    \"Eric Clapton\",\n    2,\n]);\n//   type tests = [expect <Equal<typeof guitaristsAsArray, string[]>>];",
              "err": {},
              "uuid": "5d7f5ec3-0570-44ce-a58a-07cbb2e10b75",
              "parentUUID": "97dfff74-d607-495f-ba9c-b777cfad1f80",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "f9e1e3b9-fd84-46b8-819e-1a9b86848526",
            "7259dc31-58b7-4d60-921a-1a864348c22d",
            "5d7f5ec3-0570-44ce-a58a-07cbb2e10b75"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "59759942-7ccc-4516-99a7-b9e3c01a6ce8",
          "title": "Typing async function",
          "fullFile": "/Users/alchem01/dev/tutorials/typescript/ts-tutorial/src/typingAsyncFunction.ts",
          "file": "/src/typingAsyncFunction.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Should create the user, then get them",
              "fullTitle": "Typing async function Should create the user, then get them",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        const user = yield createThenGetUser(() => __awaiter(void 0, void 0, void 0, function* () { return \"123\"; }), (id) => __awaiter(void 0, void 0, void 0, function* () {\n            return ({\n                id,\n                firstName: \"Matt\",\n                lastName: \"Pocock\",\n            });\n        }));\n        expect(user).to.deep.equal({\n            id: \"123\",\n            firstName: \"Matt\",\n            lastName: \"Pocock\",\n        });\n    })",
              "err": {},
              "uuid": "a6fbc220-39af-456e-bf3a-eb9dac297588",
              "parentUUID": "59759942-7ccc-4516-99a7-b9e3c01a6ce8",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "a6fbc220-39af-456e-bf3a-eb9dac297588"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "1d32264e-62f7-417a-b36c-79a099566af1",
          "title": "Coercing unknown types",
          "fullFile": "/Users/alchem01/dev/tutorials/typescript/ts-tutorial/src/typingErrorsInTryCatch.ts",
          "file": "/src/typingErrorsInTryCatch.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Should return the message when it fails",
              "fullTitle": "Coercing unknown types Should return the message when it fails",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(tryCatchDemo(\"fail\")).to.be.equal(\"Failure!\");",
              "err": {},
              "uuid": "d72917f4-b5ca-43cd-ba17-6580852b451c",
              "parentUUID": "1d32264e-62f7-417a-b36c-79a099566af1",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "d72917f4-b5ca-43cd-ba17-6580852b451c"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        }
      ],
      "passes": [
        "da07cf70-96ca-45e6-aec6-651a0c69579f",
        "14806438-b603-41ca-a2f9-cc651b011711",
        "7f6285ef-d7f4-455a-939a-ae0c7ed7ce02",
        "28fa1344-b6b6-499c-882f-c649f255012b",
        "715702cd-bd69-483f-b39d-64083c537dcd",
        "d5e4be68-495b-4d05-b823-15754d35c125",
        "004d16d5-9636-475b-899b-a44fd9ef61a9",
        "7adea454-e40d-454d-8b56-32543fec0ad5",
        "47a32676-6bbd-4e7e-a2b7-0d57faa96e78",
        "e52cc76b-1df5-4a6a-8bfa-7ce1ee5a8720",
        "c55aa476-1fa1-4f25-aa34-e93fc63680a2",
        "1cfc772d-8597-435d-975d-c9862136292a",
        "25e12f1c-7514-4a1b-a6bc-5125d82ccfb0",
        "7638d30c-0195-4b4c-b323-2bd2d7898701",
        "f7729761-fabd-4730-879b-5e1762a01ce4"
      ],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 2,
      "root": true,
      "rootEmpty": false,
      "_timeout": 10000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.2.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "api-test-report",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "reportDir": "__test-report__",
        "reportFilename": "api-test-report",
        "reportTitle": "API-Test-Report",
        "inlineAssets": "true"
      },
      "version": "6.2.0"
    }
  }
}