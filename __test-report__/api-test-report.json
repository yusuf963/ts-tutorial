{
  "stats": {
    "suites": 6,
    "tests": 24,
    "passes": 24,
    "pending": 0,
    "failures": 0,
    "start": "2023-01-06T14:53:39.845Z",
    "end": "2023-01-06T14:53:39.853Z",
    "duration": 8,
    "testsRegistered": 24,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "71769def-9a42-42eb-9cb8-612afbb4817b",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [
        {
          "title": "should add two numbers",
          "fullTitle": "should add two numbers",
          "timedOut": false,
          "duration": 1,
          "state": "passed",
          "speed": "fast",
          "pass": true,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "const result = addTwoNumber({ first: 1, second: 2 });\nexpect(result).to.equal(3);",
          "err": {},
          "uuid": "b5a6026c-53b4-45e0-b13f-21e5703ddcb6",
          "parentUUID": "71769def-9a42-42eb-9cb8-612afbb4817b",
          "isHook": false,
          "skipped": false
        },
        {
          "title": "Should work with just the first name",
          "fullTitle": "Should work with just the first name",
          "timedOut": false,
          "duration": 0,
          "state": "passed",
          "speed": "fast",
          "pass": true,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "const name = getName({\n    first: \"Matt\",\n});\nexpect(name).to.equal(\"Matt\");",
          "err": {},
          "uuid": "8bfb35ee-a6ca-4994-8059-80234f309bf1",
          "parentUUID": "71769def-9a42-42eb-9cb8-612afbb4817b",
          "isHook": false,
          "skipped": false
        },
        {
          "title": "Should work with the first and last name",
          "fullTitle": "Should work with the first and last name",
          "timedOut": false,
          "duration": 0,
          "state": "passed",
          "speed": "fast",
          "pass": true,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "const name = getName({\n    first: \"Matt\",\n    last: \"Pocock\",\n});\nexpect(name).to.equal(\"Matt Pocock\");",
          "err": {},
          "uuid": "4bc0cb44-c209-4b22-82bb-573e626c656c",
          "parentUUID": "71769def-9a42-42eb-9cb8-612afbb4817b",
          "isHook": false,
          "skipped": false
        },
        {
          "title": "Should work with the first and last name using assert ",
          "fullTitle": "Should work with the first and last name using assert ",
          "timedOut": false,
          "duration": 0,
          "state": "passed",
          "speed": "fast",
          "pass": true,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "const name = getNameY({\n    first: \"Matt\",\n    last: \"Pocock\",\n});\nassert.equal(name, \"Matt Pocock\");",
          "err": {},
          "uuid": "2a613713-2c56-4617-b77b-87726b5b888d",
          "parentUUID": "71769def-9a42-42eb-9cb8-612afbb4817b",
          "isHook": false,
          "skipped": false
        },
        {
          "title": "Should work with just the first name",
          "fullTitle": "Should work with just the first name",
          "timedOut": false,
          "duration": 0,
          "state": "passed",
          "speed": "fast",
          "pass": true,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "const name = getName(\"Matt\");\nexpect(name).to.deep.equal(\"Matt\");",
          "err": {},
          "uuid": "c9bd0bb5-4495-4ac2-9cb3-aa4312869c69",
          "parentUUID": "71769def-9a42-42eb-9cb8-612afbb4817b",
          "isHook": false,
          "skipped": false
        },
        {
          "title": "Should work with the first and last name",
          "fullTitle": "Should work with the first and last name",
          "timedOut": false,
          "duration": 0,
          "state": "passed",
          "speed": "fast",
          "pass": true,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "const name = getName(\"Matt\", \"Pocock\");\nexpect(name).to.deep.equal(\"Matt Pocock\");",
          "err": {},
          "uuid": "af812d2b-cb6c-4e69-8011-571d05d59966",
          "parentUUID": "71769def-9a42-42eb-9cb8-612afbb4817b",
          "isHook": false,
          "skipped": false
        },
        {
          "title": "Should work with the first and last name and ..arg",
          "fullTitle": "Should work with the first and last name and ..arg",
          "timedOut": false,
          "duration": 0,
          "state": "passed",
          "speed": "fast",
          "pass": true,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "const name = getName(\"Matt\", \"Pocock\", \"a\", \"b\", \"c\");\nassert.equal(name, \"Matt Pocock a,b,c\");",
          "err": {},
          "uuid": "c37a2e47-964c-419d-8e6e-432161ad4af0",
          "parentUUID": "71769def-9a42-42eb-9cb8-612afbb4817b",
          "isHook": false,
          "skipped": false
        },
        {
          "title": "Should get the user id",
          "fullTitle": "Should get the user id",
          "timedOut": false,
          "duration": 0,
          "state": "passed",
          "speed": "fast",
          "pass": true,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "expect(getUserId(defaultUser)).to.deep.equal(1);",
          "err": {},
          "uuid": "6db05f21-76b8-4e78-b7cb-36779af938c6",
          "parentUUID": "71769def-9a42-42eb-9cb8-612afbb4817b",
          "isHook": false,
          "skipped": false
        },
        {
          "title": "Should user has property of lastName",
          "fullTitle": "Should user has property of lastName",
          "timedOut": false,
          "duration": 0,
          "state": "passed",
          "speed": "fast",
          "pass": true,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "expect(user).to.have.property(\"lastName\");",
          "err": {},
          "uuid": "67b57670-a3c9-408c-a3aa-db687449f9d2",
          "parentUUID": "71769def-9a42-42eb-9cb8-612afbb4817b",
          "isHook": false,
          "skipped": false
        },
        {
          "title": "Should return a valid user",
          "fullTitle": "Should return a valid user",
          "timedOut": false,
          "duration": 0,
          "state": "passed",
          "speed": "fast",
          "pass": true,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "expect(user.id).to.be.a(\"number\");\nexpect(user.firstName).to.be.a(\"string\");\nexpect(user.lastName).to.be.a(\"string\");\nexpect(user.role).to.be.oneOf([\"super-admin\", \"admin\", \"user\", \"dw\"]);\nexpect(user.posts[0].id).to.be.a(\"number\");\nexpect(user.posts[0].title).to.be.a(\"string\");",
          "err": {},
          "uuid": "0058d2d3-fc2c-4979-9876-d20d4255c0cc",
          "parentUUID": "71769def-9a42-42eb-9cb8-612afbb4817b",
          "isHook": false,
          "skipped": false
        },
        {
          "title": "Should return a valid user admin value",
          "fullTitle": "Should return a valid user admin value",
          "timedOut": false,
          "duration": 0,
          "state": "passed",
          "speed": "fast",
          "pass": true,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "expect(user.role).to.be.oneOf(['admin']);",
          "err": {},
          "uuid": "d2eeaed3-4337-41c2-9fd5-a9b84c0b441c",
          "parentUUID": "71769def-9a42-42eb-9cb8-612afbb4817b",
          "isHook": false,
          "skipped": false
        }
      ],
      "suites": [
        {
          "uuid": "15270cef-4153-4d42-ae83-b05e6000fee3",
          "title": "Implicitly any type",
          "fullFile": "/Users/alchem01/dev/tutorials/typescript/ts-tutorial/src/1-implicitAny.ts",
          "file": "/src/1-implicitAny.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should add two numbers",
              "fullTitle": "Implicitly any type should add two numbers",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const result = addNum(2, 3);\nexpect(result).to.equal(5);",
              "err": {},
              "uuid": "ab9c84c7-e5d9-4ce1-8329-a0879440efff",
              "parentUUID": "15270cef-4153-4d42-ae83-b05e6000fee3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should add two objects",
              "fullTitle": "Implicitly any type should add two objects",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const result = addObject({ name: \"bob\" }, { age: 22 });\nexpect(result).to.deep.equal({ name: \"bob\", age: 22 });",
              "err": {},
              "uuid": "420f3187-cb6d-4c21-849d-4086b5d69ec0",
              "parentUUID": "15270cef-4153-4d42-ae83-b05e6000fee3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should add two arrays",
              "fullTitle": "Implicitly any type should add two arrays",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const result = joinArray2([1, 2], [3, 4]);\nexpect(result).to.deep.equal([1, 2, 3, 4]);",
              "err": {},
              "uuid": "95d68030-11d7-4bc3-b4da-83e5dd7765bd",
              "parentUUID": "15270cef-4153-4d42-ae83-b05e6000fee3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return T type",
              "fullTitle": "Implicitly any type should return T type",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const result = joinArray2([\"1\", \"2\"], [\"3\", \"4\"]);\nexpect(result).to.deep.equal([\"1\", \"2\", \"3\", \"4\"]);",
              "err": {},
              "uuid": "b877c9fd-c65e-477b-9c4a-086a62d38f81",
              "parentUUID": "15270cef-4153-4d42-ae83-b05e6000fee3",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "ab9c84c7-e5d9-4ce1-8329-a0879440efff",
            "420f3187-cb6d-4c21-849d-4086b5d69ec0",
            "95d68030-11d7-4bc3-b4da-83e5dd7765bd",
            "b877c9fd-c65e-477b-9c4a-086a62d38f81"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "fef211ce-1b7a-4154-a69c-ca696055cf43",
          "title": "Passing Type Argument",
          "fullFile": "/Users/alchem01/dev/tutorials/typescript/ts-tutorial/src/10-passingTypeArguments.ts",
          "file": "/src/10-passingTypeArguments.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Should contain Jimi and Eric",
              "fullTitle": "Passing Type Argument Should contain Jimi and Eric",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(guitarists.has(\"Jimi Hendrix\")).to.equal(true);\nexpect(guitarists.has(\"Eric Clapton\")).to.equal(true);",
              "err": {},
              "uuid": "498dd427-d361-4cae-9850-cbf942d3ac71",
              "parentUUID": "fef211ce-1b7a-4154-a69c-ca696055cf43",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should give a type error when you try to pass a non-string",
              "fullTitle": "Passing Type Argument Should give a type error when you try to pass a non-string",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "/*  // @ts-expect-error */\nguitarists.add(2);\nexpect(guitarists.has(2)).to.equal(true);",
              "err": {},
              "uuid": "26058347-e431-4433-b88b-705c4af299cd",
              "parentUUID": "fef211ce-1b7a-4154-a69c-ca696055cf43",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should be typed as an array of strings",
              "fullTitle": "Passing Type Argument Should be typed as an array of strings",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const guitaristsAsArray = Array.from(guitarists);\nexpect(guitaristsAsArray).to.deep.equal([\n    \"Jimi Hendrix\",\n    \"Eric Clapton\",\n    2,\n]);\n//   type tests = [expect <Equal<typeof guitaristsAsArray, string[]>>];",
              "err": {},
              "uuid": "4bc15800-7cde-4ae2-84ff-6cd12f07d799",
              "parentUUID": "fef211ce-1b7a-4154-a69c-ca696055cf43",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "498dd427-d361-4cae-9850-cbf942d3ac71",
            "26058347-e431-4433-b88b-705c4af299cd",
            "4bc15800-7cde-4ae2-84ff-6cd12f07d799"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "570e786e-09b0-4072-a010-3431361b9f84",
          "title": "Assign dynamic keys to object",
          "fullFile": "/Users/alchem01/dev/tutorials/typescript/ts-tutorial/src/11-assigningdynamicKeysToObject.ts",
          "file": "/src/11-assigningdynamicKeysToObject.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Should add values to the cache",
              "fullTitle": "Assign dynamic keys to object Should add values to the cache",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const cache = createCache();\ncache.add(\"123\", \"Matt\");\nexpect(cache.cache[\"123\"]).to.be.equal(\"Matt\");",
              "err": {},
              "uuid": "5825d5bf-a2fc-43a1-adfd-d8d7c7d61f96",
              "parentUUID": "570e786e-09b0-4072-a010-3431361b9f84",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should remove values from the cache",
              "fullTitle": "Assign dynamic keys to object Should remove values from the cache",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const cache = createCache();\ncache.add(\"123\", \"Matt\");\ncache.remove(\"123\");\nexpect(cache.cache[\"123\"]).to.be.equal(undefined);",
              "err": {},
              "uuid": "d8998710-8592-4769-8ff1-a215799b959e",
              "parentUUID": "570e786e-09b0-4072-a010-3431361b9f84",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "5825d5bf-a2fc-43a1-adfd-d8d7c7d61f96",
            "d8998710-8592-4769-8ff1-a215799b959e"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "07a56d92-55c9-456f-9cfe-e4d79f71b207",
          "title": "Narrowing down union types",
          "fullFile": "/Users/alchem01/dev/tutorials/typescript/ts-tutorial/src/12-narrowingDownUnionTypes.ts",
          "file": "/src/12-narrowingDownUnionTypes.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Should return the amount when passed an object",
              "fullTitle": "Narrowing down union types Should return the amount when passed an object",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(coerceAmount({ amount: 20 })).to.be.equal(20);",
              "err": {},
              "uuid": "2f047e70-d6f3-450e-a5db-ead376e0717d",
              "parentUUID": "07a56d92-55c9-456f-9cfe-e4d79f71b207",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should return the amount when passed a number",
              "fullTitle": "Narrowing down union types Should return the amount when passed a number",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(coerceAmount(20)).to.be.equal(20);",
              "err": {},
              "uuid": "a2bd1f56-0a87-4760-8689-9dc4b0d51fd5",
              "parentUUID": "07a56d92-55c9-456f-9cfe-e4d79f71b207",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "2f047e70-d6f3-450e-a5db-ead376e0717d",
            "a2bd1f56-0a87-4760-8689-9dc4b0d51fd5"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "df3b7caf-d783-4b4a-85ed-17b12b12d2c0",
          "title": "Coercing unknown types",
          "fullFile": "/Users/alchem01/dev/tutorials/typescript/ts-tutorial/src/13-typingErrorsInTryCatch.ts",
          "file": "/src/13-typingErrorsInTryCatch.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Should return the message when it fails",
              "fullTitle": "Coercing unknown types Should return the message when it fails",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(tryCatchDemo(\"fail\")).to.be.equal(\"Failure!\");",
              "err": {},
              "uuid": "18fb8a81-fe16-4f30-bdd9-8b70ee3e95d0",
              "parentUUID": "df3b7caf-d783-4b4a-85ed-17b12b12d2c0",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "18fb8a81-fe16-4f30-bdd9-8b70ee3e95d0"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "b00d51f5-2edd-41bf-8fea-0eb3ab47aec2",
          "title": "Typing async function",
          "fullFile": "/Users/alchem01/dev/tutorials/typescript/ts-tutorial/src/18-typingAsyncFunction.ts",
          "file": "/src/18-typingAsyncFunction.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Should create the user, then get them",
              "fullTitle": "Typing async function Should create the user, then get them",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        const user = yield createThenGetUser(() => __awaiter(void 0, void 0, void 0, function* () { return \"123\"; }), (id) => __awaiter(void 0, void 0, void 0, function* () {\n            return ({\n                id,\n                firstName: \"Matt\",\n                lastName: \"Pocock\",\n            });\n        }));\n        expect(user).to.deep.equal({\n            id: \"123\",\n            firstName: \"Matt\",\n            lastName: \"Pocock\",\n        });\n    })",
              "err": {},
              "uuid": "cfae1501-afc3-48eb-908b-68d1f3baf261",
              "parentUUID": "b00d51f5-2edd-41bf-8fea-0eb3ab47aec2",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "cfae1501-afc3-48eb-908b-68d1f3baf261"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        }
      ],
      "passes": [
        "b5a6026c-53b4-45e0-b13f-21e5703ddcb6",
        "8bfb35ee-a6ca-4994-8059-80234f309bf1",
        "4bc0cb44-c209-4b22-82bb-573e626c656c",
        "2a613713-2c56-4617-b77b-87726b5b888d",
        "c9bd0bb5-4495-4ac2-9cb3-aa4312869c69",
        "af812d2b-cb6c-4e69-8011-571d05d59966",
        "c37a2e47-964c-419d-8e6e-432161ad4af0",
        "6db05f21-76b8-4e78-b7cb-36779af938c6",
        "67b57670-a3c9-408c-a3aa-db687449f9d2",
        "0058d2d3-fc2c-4979-9876-d20d4255c0cc",
        "d2eeaed3-4337-41c2-9fd5-a9b84c0b441c"
      ],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 1,
      "root": true,
      "rootEmpty": false,
      "_timeout": 10000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.2.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "api-test-report",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "reportDir": "__test-report__",
        "reportFilename": "api-test-report",
        "reportTitle": "API-Test-Report",
        "inlineAssets": "true"
      },
      "version": "6.2.0"
    }
  }
}