{
  "stats": {
    "suites": 4,
    "tests": 23,
    "passes": 23,
    "pending": 0,
    "failures": 0,
    "start": "2023-01-06T12:12:46.144Z",
    "end": "2023-01-06T12:12:46.152Z",
    "duration": 8,
    "testsRegistered": 23,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "18431aee-06d2-4598-a1d2-d3e19fb5705c",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [
        {
          "title": "Should get the user id",
          "fullTitle": "Should get the user id",
          "timedOut": false,
          "duration": 0,
          "state": "passed",
          "speed": "fast",
          "pass": true,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "expect(getUserId(defaultUser)).to.deep.equal(1);",
          "err": {},
          "uuid": "1746a083-0ad5-4bb7-aae3-08820333a73a",
          "parentUUID": "18431aee-06d2-4598-a1d2-d3e19fb5705c",
          "isHook": false,
          "skipped": false
        },
        {
          "title": "Should user has property of lastName",
          "fullTitle": "Should user has property of lastName",
          "timedOut": false,
          "duration": 0,
          "state": "passed",
          "speed": "fast",
          "pass": true,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "expect(user).to.have.property(\"lastName\");",
          "err": {},
          "uuid": "c7f8db4d-0918-4c97-a773-16bf2d3128d4",
          "parentUUID": "18431aee-06d2-4598-a1d2-d3e19fb5705c",
          "isHook": false,
          "skipped": false
        },
        {
          "title": "Should return a valid user",
          "fullTitle": "Should return a valid user",
          "timedOut": false,
          "duration": 0,
          "state": "passed",
          "speed": "fast",
          "pass": true,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "expect(user.id).to.be.a(\"number\");\nexpect(user.firstName).to.be.a(\"string\");\nexpect(user.lastName).to.be.a(\"string\");\nexpect(user.role).to.be.oneOf([\"super-admin\", \"admin\", \"user\", \"dw\"]);\nexpect(user.posts[0].id).to.be.a(\"number\");\nexpect(user.posts[0].title).to.be.a(\"string\");",
          "err": {},
          "uuid": "45d173a6-5a00-400b-8f87-8c0047f553c3",
          "parentUUID": "18431aee-06d2-4598-a1d2-d3e19fb5705c",
          "isHook": false,
          "skipped": false
        },
        {
          "title": "Should return a valid user admin value",
          "fullTitle": "Should return a valid user admin value",
          "timedOut": false,
          "duration": 0,
          "state": "passed",
          "speed": "fast",
          "pass": true,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "expect(user.role).to.be.oneOf(['admin']);",
          "err": {},
          "uuid": "2cdca68e-c947-4b7d-a295-03e6ef002a89",
          "parentUUID": "18431aee-06d2-4598-a1d2-d3e19fb5705c",
          "isHook": false,
          "skipped": false
        },
        {
          "title": "should add two numbers",
          "fullTitle": "should add two numbers",
          "timedOut": false,
          "duration": 0,
          "state": "passed",
          "speed": "fast",
          "pass": true,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "const result = addNum(2, 3);\nexpect(result).to.equal(5);",
          "err": {},
          "uuid": "70fb6dc1-76c0-4719-98a1-fc21ce40b6cb",
          "parentUUID": "18431aee-06d2-4598-a1d2-d3e19fb5705c",
          "isHook": false,
          "skipped": false
        },
        {
          "title": "should add two objects",
          "fullTitle": "should add two objects",
          "timedOut": false,
          "duration": 0,
          "state": "passed",
          "speed": "fast",
          "pass": true,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "const result = addObject({ name: 'bob' }, { age: 22 });\nexpect(result).to.deep.equal({ name: 'bob', age: 22 });",
          "err": {},
          "uuid": "2fed2a1e-6510-48f4-a385-7047ea9a13c9",
          "parentUUID": "18431aee-06d2-4598-a1d2-d3e19fb5705c",
          "isHook": false,
          "skipped": false
        },
        {
          "title": "should add two arrays",
          "fullTitle": "should add two arrays",
          "timedOut": false,
          "duration": 0,
          "state": "passed",
          "speed": "fast",
          "pass": true,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "const result = joinArray2([1, 2], [3, 4]);\nexpect(result).to.deep.equal([1, 2, 3, 4]);",
          "err": {},
          "uuid": "b8b3c08c-c298-43d8-910f-9d1b27db9400",
          "parentUUID": "18431aee-06d2-4598-a1d2-d3e19fb5705c",
          "isHook": false,
          "skipped": false
        },
        {
          "title": "should return T type",
          "fullTitle": "should return T type",
          "timedOut": false,
          "duration": 0,
          "state": "passed",
          "speed": "fast",
          "pass": true,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "const result = joinArray2(['1', '2'], ['3', '4']);\nexpect(result).to.deep.equal(['1', '2', '3', '4']);",
          "err": {},
          "uuid": "b64045d3-4b66-42fa-9917-1e9a10873680",
          "parentUUID": "18431aee-06d2-4598-a1d2-d3e19fb5705c",
          "isHook": false,
          "skipped": false
        },
        {
          "title": "should add two numbers",
          "fullTitle": "should add two numbers",
          "timedOut": false,
          "duration": 0,
          "state": "passed",
          "speed": "fast",
          "pass": true,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "const result = addTwoNumber({ first: 1, second: 2 });\nexpect(result).to.equal(3);",
          "err": {},
          "uuid": "86b6ef8d-9361-43de-b821-eb3ae3e7a6ea",
          "parentUUID": "18431aee-06d2-4598-a1d2-d3e19fb5705c",
          "isHook": false,
          "skipped": false
        },
        {
          "title": "Should work with just the first name",
          "fullTitle": "Should work with just the first name",
          "timedOut": false,
          "duration": 0,
          "state": "passed",
          "speed": "fast",
          "pass": true,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "const name = getName(\"Matt\");\nexpect(name).to.deep.equal(\"Matt\");",
          "err": {},
          "uuid": "f69cdb23-3111-4f10-97ab-2fc5ab64c21a",
          "parentUUID": "18431aee-06d2-4598-a1d2-d3e19fb5705c",
          "isHook": false,
          "skipped": false
        },
        {
          "title": "Should work with the first and last name",
          "fullTitle": "Should work with the first and last name",
          "timedOut": false,
          "duration": 0,
          "state": "passed",
          "speed": "fast",
          "pass": true,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "const name = getName(\"Matt\", \"Pocock\");\nexpect(name).to.deep.equal(\"Matt Pocock\");",
          "err": {},
          "uuid": "6683d22b-ce66-4557-bbdc-7fc79f680c37",
          "parentUUID": "18431aee-06d2-4598-a1d2-d3e19fb5705c",
          "isHook": false,
          "skipped": false
        },
        {
          "title": "Should work with the first and last name and ..arg",
          "fullTitle": "Should work with the first and last name and ..arg",
          "timedOut": false,
          "duration": 0,
          "state": "passed",
          "speed": "fast",
          "pass": true,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "const name = getName(\"Matt\", \"Pocock\", \"a\", \"b\", \"c\");\nassert.equal(name, \"Matt Pocock a,b,c\");",
          "err": {},
          "uuid": "08a3e181-f89a-4db0-aa05-ca0adbb78775",
          "parentUUID": "18431aee-06d2-4598-a1d2-d3e19fb5705c",
          "isHook": false,
          "skipped": false
        },
        {
          "title": "Should work with just the first name",
          "fullTitle": "Should work with just the first name",
          "timedOut": false,
          "duration": 0,
          "state": "passed",
          "speed": "fast",
          "pass": true,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "const name = getName({\n    first: \"Matt\",\n});\nexpect(name).to.equal(\"Matt\");",
          "err": {},
          "uuid": "1d65eb40-887d-4cd0-a631-ab267101a1f3",
          "parentUUID": "18431aee-06d2-4598-a1d2-d3e19fb5705c",
          "isHook": false,
          "skipped": false
        },
        {
          "title": "Should work with the first and last name",
          "fullTitle": "Should work with the first and last name",
          "timedOut": false,
          "duration": 0,
          "state": "passed",
          "speed": "fast",
          "pass": true,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "const name = getName({\n    first: \"Matt\",\n    last: \"Pocock\",\n});\nexpect(name).to.equal(\"Matt Pocock\");",
          "err": {},
          "uuid": "0aeb6016-944f-4cfc-900a-a524b0fe8a6c",
          "parentUUID": "18431aee-06d2-4598-a1d2-d3e19fb5705c",
          "isHook": false,
          "skipped": false
        },
        {
          "title": "Should work with the first and last name using assert ",
          "fullTitle": "Should work with the first and last name using assert ",
          "timedOut": false,
          "duration": 0,
          "state": "passed",
          "speed": "fast",
          "pass": true,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "const name = getNameY({\n    first: \"Matt\",\n    last: \"Pocock\",\n});\nassert.equal(name, \"Matt Pocock\");",
          "err": {},
          "uuid": "b0da032a-5abd-42be-b8be-f64c8321aa25",
          "parentUUID": "18431aee-06d2-4598-a1d2-d3e19fb5705c",
          "isHook": false,
          "skipped": false
        }
      ],
      "suites": [
        {
          "uuid": "ca9c65c1-3780-43e1-844c-9e034269829b",
          "title": "Assign dynamic keys to object",
          "fullFile": "/Users/alchem01/dev/tutorials/typescript/ts-tutorial/src/assigningdynamicKeysToObject.ts",
          "file": "/src/assigningdynamicKeysToObject.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Should add values to the cache",
              "fullTitle": "Assign dynamic keys to object Should add values to the cache",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const cache = createCache();\ncache.add(\"123\", \"Matt\");\nexpect(cache.cache[\"123\"]).to.be.equal(\"Matt\");",
              "err": {},
              "uuid": "b4195ca8-67bb-4e6d-892f-57608cb007a1",
              "parentUUID": "ca9c65c1-3780-43e1-844c-9e034269829b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should remove values from the cache",
              "fullTitle": "Assign dynamic keys to object Should remove values from the cache",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const cache = createCache();\ncache.add(\"123\", \"Matt\");\ncache.remove(\"123\");\nexpect(cache.cache[\"123\"]).to.be.equal(undefined);",
              "err": {},
              "uuid": "798387f4-d3d5-4829-884f-ce9f6538d3de",
              "parentUUID": "ca9c65c1-3780-43e1-844c-9e034269829b",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "b4195ca8-67bb-4e6d-892f-57608cb007a1",
            "798387f4-d3d5-4829-884f-ce9f6538d3de"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "93ad55a5-d2df-4fdf-8725-3d169b329b9e",
          "title": "Narrowing down union types",
          "fullFile": "/Users/alchem01/dev/tutorials/typescript/ts-tutorial/src/narrowingDownUnionTypes.ts",
          "file": "/src/narrowingDownUnionTypes.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Should return the amount when passed an object",
              "fullTitle": "Narrowing down union types Should return the amount when passed an object",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(coerceAmount({ amount: 20 })).to.be.equal(20);",
              "err": {},
              "uuid": "02f68831-a1ab-405a-b2ef-6e28af16e1d2",
              "parentUUID": "93ad55a5-d2df-4fdf-8725-3d169b329b9e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should return the amount when passed a number",
              "fullTitle": "Narrowing down union types Should return the amount when passed a number",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(coerceAmount(20)).to.be.equal(20);",
              "err": {},
              "uuid": "e39d6289-8170-4985-b94e-80941ca2510b",
              "parentUUID": "93ad55a5-d2df-4fdf-8725-3d169b329b9e",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "02f68831-a1ab-405a-b2ef-6e28af16e1d2",
            "e39d6289-8170-4985-b94e-80941ca2510b"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "d32c3fed-044e-4e4c-88d4-23599e20a168",
          "title": "Passing Type Argument",
          "fullFile": "/Users/alchem01/dev/tutorials/typescript/ts-tutorial/src/passingTypeArguments.ts",
          "file": "/src/passingTypeArguments.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Should contain Jimi and Eric",
              "fullTitle": "Passing Type Argument Should contain Jimi and Eric",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(guitarists.has(\"Jimi Hendrix\")).to.equal(true);\nexpect(guitarists.has(\"Eric Clapton\")).to.equal(true);",
              "err": {},
              "uuid": "eaa74847-36e8-4aaf-a5cb-72b4c749a18d",
              "parentUUID": "d32c3fed-044e-4e4c-88d4-23599e20a168",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should give a type error when you try to pass a non-string",
              "fullTitle": "Passing Type Argument Should give a type error when you try to pass a non-string",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "/*  // @ts-expect-error */\nguitarists.add(2);\nexpect(guitarists.has(2)).to.equal(true);",
              "err": {},
              "uuid": "80d1fd6e-84f3-42e3-ab55-152cf27e2bc7",
              "parentUUID": "d32c3fed-044e-4e4c-88d4-23599e20a168",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should be typed as an array of strings",
              "fullTitle": "Passing Type Argument Should be typed as an array of strings",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const guitaristsAsArray = Array.from(guitarists);\nexpect(guitaristsAsArray).to.deep.equal([\n    \"Jimi Hendrix\",\n    \"Eric Clapton\",\n    2,\n]);\n//   type tests = [expect <Equal<typeof guitaristsAsArray, string[]>>];",
              "err": {},
              "uuid": "a0930398-3763-4147-9790-b3c817d7877e",
              "parentUUID": "d32c3fed-044e-4e4c-88d4-23599e20a168",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "eaa74847-36e8-4aaf-a5cb-72b4c749a18d",
            "80d1fd6e-84f3-42e3-ab55-152cf27e2bc7",
            "a0930398-3763-4147-9790-b3c817d7877e"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "7f0a9257-f6ff-4ed5-9a75-f7788b174eea",
          "title": "Coercing unknown types",
          "fullFile": "/Users/alchem01/dev/tutorials/typescript/ts-tutorial/src/typingErrorsInTryCatch.ts",
          "file": "/src/typingErrorsInTryCatch.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Should return the message when it fails",
              "fullTitle": "Coercing unknown types Should return the message when it fails",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(tryCatchDemo(\"fail\")).to.be.equal(\"Failure!\");",
              "err": {},
              "uuid": "e0343ad4-0bc2-4b29-a94a-e963458647a1",
              "parentUUID": "7f0a9257-f6ff-4ed5-9a75-f7788b174eea",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "e0343ad4-0bc2-4b29-a94a-e963458647a1"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        }
      ],
      "passes": [
        "1746a083-0ad5-4bb7-aae3-08820333a73a",
        "c7f8db4d-0918-4c97-a773-16bf2d3128d4",
        "45d173a6-5a00-400b-8f87-8c0047f553c3",
        "2cdca68e-c947-4b7d-a295-03e6ef002a89",
        "70fb6dc1-76c0-4719-98a1-fc21ce40b6cb",
        "2fed2a1e-6510-48f4-a385-7047ea9a13c9",
        "b8b3c08c-c298-43d8-910f-9d1b27db9400",
        "b64045d3-4b66-42fa-9917-1e9a10873680",
        "86b6ef8d-9361-43de-b821-eb3ae3e7a6ea",
        "f69cdb23-3111-4f10-97ab-2fc5ab64c21a",
        "6683d22b-ce66-4557-bbdc-7fc79f680c37",
        "08a3e181-f89a-4db0-aa05-ca0adbb78775",
        "1d65eb40-887d-4cd0-a631-ab267101a1f3",
        "0aeb6016-944f-4cfc-900a-a524b0fe8a6c",
        "b0da032a-5abd-42be-b8be-f64c8321aa25"
      ],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": false,
      "_timeout": 10000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.2.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "api-test-report",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "reportDir": "__test-report__",
        "reportFilename": "api-test-report",
        "reportTitle": "API-Test-Report",
        "inlineAssets": "true"
      },
      "version": "6.2.0"
    }
  }
}