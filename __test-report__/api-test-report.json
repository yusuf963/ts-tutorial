{
  "stats": {
    "suites": 0,
    "tests": 8,
    "passes": 8,
    "pending": 0,
    "failures": 0,
    "start": "2023-01-04T23:46:55.239Z",
    "end": "2023-01-04T23:46:55.243Z",
    "duration": 4,
    "testsRegistered": 8,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "09ac238f-661c-4975-bf7c-5fa2668800e9",
      "title": "",
      "fullFile": "",
      "file": "/Users/alchem01/dev/tutorials/ts-tutorial/src/implicitAny.ts",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [
        {
          "title": "should add two numbers",
          "fullTitle": "should add two numbers",
          "timedOut": false,
          "duration": 0,
          "state": "passed",
          "speed": "fast",
          "pass": true,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "const result = addNum(2, 3);\nexpect(result).to.equal(5);",
          "err": {},
          "uuid": "66f0613d-1650-41f1-8461-233b19104c80",
          "parentUUID": "09ac238f-661c-4975-bf7c-5fa2668800e9",
          "isHook": false,
          "skipped": false
        },
        {
          "title": "should add two objects",
          "fullTitle": "should add two objects",
          "timedOut": false,
          "duration": 1,
          "state": "passed",
          "speed": "fast",
          "pass": true,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "const result = addObject({ name: 'bob' }, { age: 22 });\nexpect(result).to.deep.equal({ name: 'bob', age: 22 });",
          "err": {},
          "uuid": "eb21081a-1787-4ed5-97f8-017fd889d165",
          "parentUUID": "09ac238f-661c-4975-bf7c-5fa2668800e9",
          "isHook": false,
          "skipped": false
        },
        {
          "title": "should add two arrays",
          "fullTitle": "should add two arrays",
          "timedOut": false,
          "duration": 0,
          "state": "passed",
          "speed": "fast",
          "pass": true,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "const result = joinArray2([1, 2], [3, 4]);\nexpect(result).to.deep.equal([1, 2, 3, 4]);",
          "err": {},
          "uuid": "660c2b6c-e0b7-4c82-8b74-58293307717b",
          "parentUUID": "09ac238f-661c-4975-bf7c-5fa2668800e9",
          "isHook": false,
          "skipped": false
        },
        {
          "title": "should return T type",
          "fullTitle": "should return T type",
          "timedOut": false,
          "duration": 0,
          "state": "passed",
          "speed": "fast",
          "pass": true,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "const result = joinArray2(['1', '2'], ['3', '4']);\nexpect(result).to.deep.equal(['1', '2', '3', '4']);",
          "err": {},
          "uuid": "46b53377-9f92-4cb6-9156-4e328d6428c4",
          "parentUUID": "09ac238f-661c-4975-bf7c-5fa2668800e9",
          "isHook": false,
          "skipped": false
        },
        {
          "title": "should add two numbers",
          "fullTitle": "should add two numbers",
          "timedOut": false,
          "duration": 0,
          "state": "passed",
          "speed": "fast",
          "pass": true,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "const result = addTwoNumber({ first: 1, second: 2 });\nexpect(result).to.equal(3);",
          "err": {},
          "uuid": "3915d960-8191-4091-9d75-7178c052a1a4",
          "parentUUID": "09ac238f-661c-4975-bf7c-5fa2668800e9",
          "isHook": false,
          "skipped": false
        },
        {
          "title": "Should work with just the first name",
          "fullTitle": "Should work with just the first name",
          "timedOut": false,
          "duration": 0,
          "state": "passed",
          "speed": "fast",
          "pass": true,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "const name = getName({\n    first: \"Matt\",\n});\nexpect(name).to.equal(\"Matt\");",
          "err": {},
          "uuid": "4110960d-16b4-4515-928d-1847d27e859e",
          "parentUUID": "09ac238f-661c-4975-bf7c-5fa2668800e9",
          "isHook": false,
          "skipped": false
        },
        {
          "title": "Should work with the first and last name",
          "fullTitle": "Should work with the first and last name",
          "timedOut": false,
          "duration": 0,
          "state": "passed",
          "speed": "fast",
          "pass": true,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "const name = getName({\n    first: \"Matt\",\n    last: \"Pocock\",\n});\nexpect(name).to.equal(\"Matt Pocock\");",
          "err": {},
          "uuid": "d25ada81-9804-4b18-a731-c3113082596e",
          "parentUUID": "09ac238f-661c-4975-bf7c-5fa2668800e9",
          "isHook": false,
          "skipped": false
        },
        {
          "title": "Should work with the first and last name using assert ",
          "fullTitle": "Should work with the first and last name using assert ",
          "timedOut": false,
          "duration": 1,
          "state": "passed",
          "speed": "fast",
          "pass": true,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "const name = getNameY({\n    first: \"Matt\",\n    last: \"Pocock\",\n});\nassert.equal(name, \"Matt Pocock\");",
          "err": {},
          "uuid": "17584663-f645-48c2-b5a5-192aba084780",
          "parentUUID": "09ac238f-661c-4975-bf7c-5fa2668800e9",
          "isHook": false,
          "skipped": false
        }
      ],
      "suites": [],
      "passes": [
        "66f0613d-1650-41f1-8461-233b19104c80",
        "eb21081a-1787-4ed5-97f8-017fd889d165",
        "660c2b6c-e0b7-4c82-8b74-58293307717b",
        "46b53377-9f92-4cb6-9156-4e328d6428c4",
        "3915d960-8191-4091-9d75-7178c052a1a4",
        "4110960d-16b4-4515-928d-1847d27e859e",
        "d25ada81-9804-4b18-a731-c3113082596e",
        "17584663-f645-48c2-b5a5-192aba084780"
      ],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 2,
      "root": true,
      "rootEmpty": false,
      "_timeout": 10000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.2.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "api-test-report",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "reportDir": "__test-report__",
        "reportFilename": "api-test-report",
        "reportTitle": "API-Test-Report",
        "inlineAssets": "true"
      },
      "version": "6.2.0"
    }
  }
}