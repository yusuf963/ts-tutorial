{
  "stats": {
    "suites": 1,
    "tests": 18,
    "passes": 18,
    "pending": 0,
    "failures": 0,
    "start": "2023-01-06T11:02:55.326Z",
    "end": "2023-01-06T11:02:55.332Z",
    "duration": 6,
    "testsRegistered": 18,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "1cab58ec-3379-4cf0-b4a7-cc5275194af8",
      "title": "",
      "fullFile": "/Users/alchem01/dev/tutorials/typescript/ts-tutorial/src/passingTypeArguments.ts",
      "file": "/src/passingTypeArguments.ts",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [
        {
          "title": "Should get the user id",
          "fullTitle": "Should get the user id",
          "timedOut": false,
          "duration": 1,
          "state": "passed",
          "speed": "fast",
          "pass": true,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "expect(getUserId(defaultUser)).to.deep.equal(1);",
          "err": {},
          "uuid": "41a9cf90-9b84-4250-9e0e-3081080b7b90",
          "parentUUID": "1cab58ec-3379-4cf0-b4a7-cc5275194af8",
          "isHook": false,
          "skipped": false
        },
        {
          "title": "Should user has property of lastName",
          "fullTitle": "Should user has property of lastName",
          "timedOut": false,
          "duration": 1,
          "state": "passed",
          "speed": "fast",
          "pass": true,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "expect(user).to.have.property(\"lastName\");",
          "err": {},
          "uuid": "22e16b59-7ea3-4b56-8f2a-3ff1298aa3bd",
          "parentUUID": "1cab58ec-3379-4cf0-b4a7-cc5275194af8",
          "isHook": false,
          "skipped": false
        },
        {
          "title": "Should return a valid user",
          "fullTitle": "Should return a valid user",
          "timedOut": false,
          "duration": 0,
          "state": "passed",
          "speed": "fast",
          "pass": true,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "expect(user.id).to.be.a(\"number\");\nexpect(user.firstName).to.be.a(\"string\");\nexpect(user.lastName).to.be.a(\"string\");\nexpect(user.role).to.be.oneOf([\"super-admin\", \"admin\", \"user\", \"dw\"]);\nexpect(user.posts[0].id).to.be.a(\"number\");\nexpect(user.posts[0].title).to.be.a(\"string\");",
          "err": {},
          "uuid": "5de16717-aac2-4657-a77d-dcac470ee1cf",
          "parentUUID": "1cab58ec-3379-4cf0-b4a7-cc5275194af8",
          "isHook": false,
          "skipped": false
        },
        {
          "title": "Should return a valid user admin value",
          "fullTitle": "Should return a valid user admin value",
          "timedOut": false,
          "duration": 0,
          "state": "passed",
          "speed": "fast",
          "pass": true,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "expect(user.role).to.be.oneOf(['admin']);",
          "err": {},
          "uuid": "e83949cb-2002-44e1-9a86-27842b07eb07",
          "parentUUID": "1cab58ec-3379-4cf0-b4a7-cc5275194af8",
          "isHook": false,
          "skipped": false
        },
        {
          "title": "should add two numbers",
          "fullTitle": "should add two numbers",
          "timedOut": false,
          "duration": 0,
          "state": "passed",
          "speed": "fast",
          "pass": true,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "const result = addNum(2, 3);\nexpect(result).to.equal(5);",
          "err": {},
          "uuid": "11a14d78-2d17-45b6-95e1-98c4ddf7d489",
          "parentUUID": "1cab58ec-3379-4cf0-b4a7-cc5275194af8",
          "isHook": false,
          "skipped": false
        },
        {
          "title": "should add two objects",
          "fullTitle": "should add two objects",
          "timedOut": false,
          "duration": 0,
          "state": "passed",
          "speed": "fast",
          "pass": true,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "const result = addObject({ name: 'bob' }, { age: 22 });\nexpect(result).to.deep.equal({ name: 'bob', age: 22 });",
          "err": {},
          "uuid": "6bb4b780-062b-4291-a95e-a784cae8012f",
          "parentUUID": "1cab58ec-3379-4cf0-b4a7-cc5275194af8",
          "isHook": false,
          "skipped": false
        },
        {
          "title": "should add two arrays",
          "fullTitle": "should add two arrays",
          "timedOut": false,
          "duration": 0,
          "state": "passed",
          "speed": "fast",
          "pass": true,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "const result = joinArray2([1, 2], [3, 4]);\nexpect(result).to.deep.equal([1, 2, 3, 4]);",
          "err": {},
          "uuid": "0dde7cef-0b7d-44c9-9b24-2922570b9c32",
          "parentUUID": "1cab58ec-3379-4cf0-b4a7-cc5275194af8",
          "isHook": false,
          "skipped": false
        },
        {
          "title": "should return T type",
          "fullTitle": "should return T type",
          "timedOut": false,
          "duration": 0,
          "state": "passed",
          "speed": "fast",
          "pass": true,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "const result = joinArray2(['1', '2'], ['3', '4']);\nexpect(result).to.deep.equal(['1', '2', '3', '4']);",
          "err": {},
          "uuid": "b295c343-8343-4e47-97f5-655c31d46aa4",
          "parentUUID": "1cab58ec-3379-4cf0-b4a7-cc5275194af8",
          "isHook": false,
          "skipped": false
        },
        {
          "title": "should add two numbers",
          "fullTitle": "should add two numbers",
          "timedOut": false,
          "duration": 1,
          "state": "passed",
          "speed": "fast",
          "pass": true,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "const result = addTwoNumber({ first: 1, second: 2 });\nexpect(result).to.equal(3);",
          "err": {},
          "uuid": "00f60798-42fd-456d-9509-65150386b43d",
          "parentUUID": "1cab58ec-3379-4cf0-b4a7-cc5275194af8",
          "isHook": false,
          "skipped": false
        },
        {
          "title": "Should work with just the first name",
          "fullTitle": "Should work with just the first name",
          "timedOut": false,
          "duration": 0,
          "state": "passed",
          "speed": "fast",
          "pass": true,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "const name = getName(\"Matt\");\nexpect(name).to.deep.equal(\"Matt\");",
          "err": {},
          "uuid": "f099e0fa-49db-486d-b13c-9cb2c55ee7c6",
          "parentUUID": "1cab58ec-3379-4cf0-b4a7-cc5275194af8",
          "isHook": false,
          "skipped": false
        },
        {
          "title": "Should work with the first and last name",
          "fullTitle": "Should work with the first and last name",
          "timedOut": false,
          "duration": 0,
          "state": "passed",
          "speed": "fast",
          "pass": true,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "const name = getName(\"Matt\", \"Pocock\");\nexpect(name).to.deep.equal(\"Matt Pocock\");",
          "err": {},
          "uuid": "71797f1a-2f83-4347-a5ea-266a330be2ef",
          "parentUUID": "1cab58ec-3379-4cf0-b4a7-cc5275194af8",
          "isHook": false,
          "skipped": false
        },
        {
          "title": "Should work with the first and last name and ..arg",
          "fullTitle": "Should work with the first and last name and ..arg",
          "timedOut": false,
          "duration": 0,
          "state": "passed",
          "speed": "fast",
          "pass": true,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "const name = getName(\"Matt\", \"Pocock\", \"a\", \"b\", \"c\");\nassert.equal(name, \"Matt Pocock a,b,c\");",
          "err": {},
          "uuid": "b752cb31-9d88-40ca-833e-1fc9700d0ac2",
          "parentUUID": "1cab58ec-3379-4cf0-b4a7-cc5275194af8",
          "isHook": false,
          "skipped": false
        },
        {
          "title": "Should work with just the first name",
          "fullTitle": "Should work with just the first name",
          "timedOut": false,
          "duration": 1,
          "state": "passed",
          "speed": "fast",
          "pass": true,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "const name = getName({\n    first: \"Matt\",\n});\nexpect(name).to.equal(\"Matt\");",
          "err": {},
          "uuid": "a4360d75-ab62-436b-ae8f-55eba758a3f1",
          "parentUUID": "1cab58ec-3379-4cf0-b4a7-cc5275194af8",
          "isHook": false,
          "skipped": false
        },
        {
          "title": "Should work with the first and last name",
          "fullTitle": "Should work with the first and last name",
          "timedOut": false,
          "duration": 0,
          "state": "passed",
          "speed": "fast",
          "pass": true,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "const name = getName({\n    first: \"Matt\",\n    last: \"Pocock\",\n});\nexpect(name).to.equal(\"Matt Pocock\");",
          "err": {},
          "uuid": "4582e88c-143d-42fe-b084-abf3e1a37e3a",
          "parentUUID": "1cab58ec-3379-4cf0-b4a7-cc5275194af8",
          "isHook": false,
          "skipped": false
        },
        {
          "title": "Should work with the first and last name using assert ",
          "fullTitle": "Should work with the first and last name using assert ",
          "timedOut": false,
          "duration": 0,
          "state": "passed",
          "speed": "fast",
          "pass": true,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "const name = getNameY({\n    first: \"Matt\",\n    last: \"Pocock\",\n});\nassert.equal(name, \"Matt Pocock\");",
          "err": {},
          "uuid": "8e03451f-de82-4bc6-bef8-f06cc9898367",
          "parentUUID": "1cab58ec-3379-4cf0-b4a7-cc5275194af8",
          "isHook": false,
          "skipped": false
        }
      ],
      "suites": [
        {
          "uuid": "ea4a879b-67a4-4d0c-a288-c5e9cb52e7df",
          "title": "Passing Type Argument",
          "fullFile": "/Users/alchem01/dev/tutorials/typescript/ts-tutorial/src/passingTypeArguments.ts",
          "file": "/src/passingTypeArguments.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Should contain Jimi and Eric",
              "fullTitle": "Passing Type Argument Should contain Jimi and Eric",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(guitarists.has(\"Jimi Hendrix\")).to.equal(true);\nexpect(guitarists.has(\"Eric Clapton\")).to.equal(true);",
              "err": {},
              "uuid": "bc583cac-2382-4021-90a7-884804195efa",
              "parentUUID": "ea4a879b-67a4-4d0c-a288-c5e9cb52e7df",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should give a type error when you try to pass a non-string",
              "fullTitle": "Passing Type Argument Should give a type error when you try to pass a non-string",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "/*  // @ts-expect-error */\nguitarists.add(2);\nexpect(guitarists.has(2)).to.equal(true);",
              "err": {},
              "uuid": "c40e5d29-8192-4567-a009-5d771f3ee871",
              "parentUUID": "ea4a879b-67a4-4d0c-a288-c5e9cb52e7df",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should be typed as an array of strings",
              "fullTitle": "Passing Type Argument Should be typed as an array of strings",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const guitaristsAsArray = Array.from(guitarists);\nexpect(guitaristsAsArray).to.deep.equal([\n    \"Jimi Hendrix\",\n    \"Eric Clapton\",\n    2,\n]);\n//   type tests = [expect <Equal<typeof guitaristsAsArray, string[]>>];",
              "err": {},
              "uuid": "ecac85f5-30d4-4513-80f3-6f83d8692237",
              "parentUUID": "ea4a879b-67a4-4d0c-a288-c5e9cb52e7df",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "bc583cac-2382-4021-90a7-884804195efa",
            "c40e5d29-8192-4567-a009-5d771f3ee871",
            "ecac85f5-30d4-4513-80f3-6f83d8692237"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        }
      ],
      "passes": [
        "41a9cf90-9b84-4250-9e0e-3081080b7b90",
        "22e16b59-7ea3-4b56-8f2a-3ff1298aa3bd",
        "5de16717-aac2-4657-a77d-dcac470ee1cf",
        "e83949cb-2002-44e1-9a86-27842b07eb07",
        "11a14d78-2d17-45b6-95e1-98c4ddf7d489",
        "6bb4b780-062b-4291-a95e-a784cae8012f",
        "0dde7cef-0b7d-44c9-9b24-2922570b9c32",
        "b295c343-8343-4e47-97f5-655c31d46aa4",
        "00f60798-42fd-456d-9509-65150386b43d",
        "f099e0fa-49db-486d-b13c-9cb2c55ee7c6",
        "71797f1a-2f83-4347-a5ea-266a330be2ef",
        "b752cb31-9d88-40ca-833e-1fc9700d0ac2",
        "a4360d75-ab62-436b-ae8f-55eba758a3f1",
        "4582e88c-143d-42fe-b084-abf3e1a37e3a",
        "8e03451f-de82-4bc6-bef8-f06cc9898367"
      ],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 4,
      "root": true,
      "rootEmpty": false,
      "_timeout": 10000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.2.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "api-test-report",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "reportDir": "__test-report__",
        "reportFilename": "api-test-report",
        "reportTitle": "API-Test-Report",
        "inlineAssets": "true"
      },
      "version": "6.2.0"
    }
  }
}