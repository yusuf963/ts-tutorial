{
  "stats": {
    "suites": 6,
    "tests": 24,
    "passes": 24,
    "pending": 0,
    "failures": 0,
    "start": "2023-01-14T22:15:44.165Z",
    "end": "2023-01-14T22:15:44.174Z",
    "duration": 9,
    "testsRegistered": 24,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "f00ade7c-e592-41d8-b410-fa6232fbee82",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [
        {
          "title": "should add two numbers",
          "fullTitle": "should add two numbers",
          "timedOut": false,
          "duration": 1,
          "state": "passed",
          "speed": "fast",
          "pass": true,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "const result = addTwoNumber({ first: 1, second: 2 });\nexpect(result).to.equal(3);",
          "err": {},
          "uuid": "d5c847db-a3f9-42c0-925d-710707037253",
          "parentUUID": "f00ade7c-e592-41d8-b410-fa6232fbee82",
          "isHook": false,
          "skipped": false
        },
        {
          "title": "Should work with just the first name",
          "fullTitle": "Should work with just the first name",
          "timedOut": false,
          "duration": 0,
          "state": "passed",
          "speed": "fast",
          "pass": true,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "const name = getName({\n    first: 'Matt',\n});\nexpect(name).to.equal('Matt');",
          "err": {},
          "uuid": "89d79904-1ebe-4af7-a1fb-31ea44f1f30f",
          "parentUUID": "f00ade7c-e592-41d8-b410-fa6232fbee82",
          "isHook": false,
          "skipped": false
        },
        {
          "title": "Should work with the first and last name",
          "fullTitle": "Should work with the first and last name",
          "timedOut": false,
          "duration": 0,
          "state": "passed",
          "speed": "fast",
          "pass": true,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "const name = getName({\n    first: 'Matt',\n    last: 'Pocock',\n});\nexpect(name).to.equal('Matt Pocock');",
          "err": {},
          "uuid": "a1a0b5ab-c586-43de-9011-02c2cb42c79f",
          "parentUUID": "f00ade7c-e592-41d8-b410-fa6232fbee82",
          "isHook": false,
          "skipped": false
        },
        {
          "title": "Should work with the first and last name using assert ",
          "fullTitle": "Should work with the first and last name using assert ",
          "timedOut": false,
          "duration": 0,
          "state": "passed",
          "speed": "fast",
          "pass": true,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "const name = getNameY({\n    first: 'Matt',\n    last: 'Pocock',\n});\nassert.equal(name, 'Matt Pocock');",
          "err": {},
          "uuid": "6f14c555-2f5c-4979-b239-808080498d4e",
          "parentUUID": "f00ade7c-e592-41d8-b410-fa6232fbee82",
          "isHook": false,
          "skipped": false
        },
        {
          "title": "Should work with just the first name",
          "fullTitle": "Should work with just the first name",
          "timedOut": false,
          "duration": 0,
          "state": "passed",
          "speed": "fast",
          "pass": true,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "const name = getName('Matt');\nexpect(name).to.deep.equal('Matt');",
          "err": {},
          "uuid": "41747dbc-9851-4e65-b757-173bb40def36",
          "parentUUID": "f00ade7c-e592-41d8-b410-fa6232fbee82",
          "isHook": false,
          "skipped": false
        },
        {
          "title": "Should work with the first and last name",
          "fullTitle": "Should work with the first and last name",
          "timedOut": false,
          "duration": 0,
          "state": "passed",
          "speed": "fast",
          "pass": true,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "const name = getName('Matt', 'Pocock');\nexpect(name).to.deep.equal('Matt Pocock');",
          "err": {},
          "uuid": "19bd0cd7-7837-4ce1-b072-cb03443c910f",
          "parentUUID": "f00ade7c-e592-41d8-b410-fa6232fbee82",
          "isHook": false,
          "skipped": false
        },
        {
          "title": "Should work with the first and last name and ..arg",
          "fullTitle": "Should work with the first and last name and ..arg",
          "timedOut": false,
          "duration": 0,
          "state": "passed",
          "speed": "fast",
          "pass": true,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "const name = getName('Matt', 'Pocock', 'a', 'b', 'c');\nassert.equal(name, 'Matt Pocock a,b,c');",
          "err": {},
          "uuid": "1662da3e-c313-43a9-8b2c-78efec1f8148",
          "parentUUID": "f00ade7c-e592-41d8-b410-fa6232fbee82",
          "isHook": false,
          "skipped": false
        },
        {
          "title": "Should get the user id",
          "fullTitle": "Should get the user id",
          "timedOut": false,
          "duration": 0,
          "state": "passed",
          "speed": "fast",
          "pass": true,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "expect(getUserId(defaultUser)).to.deep.equal(1);",
          "err": {},
          "uuid": "bdff60bd-bdb2-4e38-a941-690777e93bc9",
          "parentUUID": "f00ade7c-e592-41d8-b410-fa6232fbee82",
          "isHook": false,
          "skipped": false
        },
        {
          "title": "Should user has property of lastName",
          "fullTitle": "Should user has property of lastName",
          "timedOut": false,
          "duration": 0,
          "state": "passed",
          "speed": "fast",
          "pass": true,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "expect(user).to.have.property('lastName');",
          "err": {},
          "uuid": "87a1f6f6-59fd-4361-a026-6fcabc5bb5f2",
          "parentUUID": "f00ade7c-e592-41d8-b410-fa6232fbee82",
          "isHook": false,
          "skipped": false
        },
        {
          "title": "Should return a valid user",
          "fullTitle": "Should return a valid user",
          "timedOut": false,
          "duration": 0,
          "state": "passed",
          "speed": "fast",
          "pass": true,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "expect(user.id).to.be.a('number');\nexpect(user.firstName).to.be.a('string');\nexpect(user.lastName).to.be.a('string');\nexpect(user.role).to.be.oneOf(['super-admin', 'admin', 'user', 'dw']);\nexpect(user.posts[0].id).to.be.a('number');\nexpect(user.posts[0].title).to.be.a('string'); // ! is a non-null assertion operator. It tells TypeScript that the value is not null or undefined.",
          "err": {},
          "uuid": "454e8c1c-8597-4ce6-bb84-8d469b621303",
          "parentUUID": "f00ade7c-e592-41d8-b410-fa6232fbee82",
          "isHook": false,
          "skipped": false
        },
        {
          "title": "Should return a valid user admin value",
          "fullTitle": "Should return a valid user admin value",
          "timedOut": false,
          "duration": 1,
          "state": "passed",
          "speed": "fast",
          "pass": true,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "expect(user.role).to.be.oneOf(['admin']);",
          "err": {},
          "uuid": "bd4047c5-b78e-4d06-a910-3f9519637dcd",
          "parentUUID": "f00ade7c-e592-41d8-b410-fa6232fbee82",
          "isHook": false,
          "skipped": false
        }
      ],
      "suites": [
        {
          "uuid": "3d67bdba-d779-4fa6-a050-1697c38c77a2",
          "title": "Implicitly any type",
          "fullFile": "/Users/alchem01/dev/tutorials/typescript/ts-tutorial/src/1-implicitAny.ts",
          "file": "/src/1-implicitAny.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should add two numbers",
              "fullTitle": "Implicitly any type should add two numbers",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const result = addNum(2, 3);\nexpect(result).to.equal(5);",
              "err": {},
              "uuid": "b3e4ec4e-9a24-4b9e-9163-29b03805661a",
              "parentUUID": "3d67bdba-d779-4fa6-a050-1697c38c77a2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should add two objects",
              "fullTitle": "Implicitly any type should add two objects",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const result = addObject({ name: 'bob' }, { age: 22 });\nexpect(result).to.deep.equal({ name: 'bob', age: 22 });",
              "err": {},
              "uuid": "f1b83da7-04e1-4035-8297-fba8e281bfa6",
              "parentUUID": "3d67bdba-d779-4fa6-a050-1697c38c77a2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should add two arrays",
              "fullTitle": "Implicitly any type should add two arrays",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const result = joinArray2([1, 2], [3, 4]);\nexpect(result).to.deep.equal([1, 2, 3, 4]);",
              "err": {},
              "uuid": "8da9a5e4-f772-41ca-93c9-fa21cb7e4c51",
              "parentUUID": "3d67bdba-d779-4fa6-a050-1697c38c77a2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return T type",
              "fullTitle": "Implicitly any type should return T type",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const result = joinArray2(['1', '2'], ['3', '4']);\nexpect(result).to.deep.equal(['1', '2', '3', '4']);",
              "err": {},
              "uuid": "1040bf0f-0a74-4a3c-9c6a-4f91fc982b57",
              "parentUUID": "3d67bdba-d779-4fa6-a050-1697c38c77a2",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "b3e4ec4e-9a24-4b9e-9163-29b03805661a",
            "f1b83da7-04e1-4035-8297-fba8e281bfa6",
            "8da9a5e4-f772-41ca-93c9-fa21cb7e4c51",
            "1040bf0f-0a74-4a3c-9c6a-4f91fc982b57"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "9eea4b28-07da-4b8b-b86e-9da4f3edc2cd",
          "title": "Passing Type Argument",
          "fullFile": "/Users/alchem01/dev/tutorials/typescript/ts-tutorial/src/10-passingTypeArguments.ts",
          "file": "/src/10-passingTypeArguments.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Should contain Jimi and Eric",
              "fullTitle": "Passing Type Argument Should contain Jimi and Eric",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(guitarists.has('Jimi Hendrix')).to.equal(true);\nexpect(guitarists.has('Eric Clapton')).to.equal(true);",
              "err": {},
              "uuid": "c9de6158-1067-4085-ac24-270d4b43b12c",
              "parentUUID": "9eea4b28-07da-4b8b-b86e-9da4f3edc2cd",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should give a type error when you try to pass a non-string",
              "fullTitle": "Passing Type Argument Should give a type error when you try to pass a non-string",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "/*  // @ts-expect-error */\nguitarists.add(2);\nexpect(guitarists.has(2)).to.equal(true);",
              "err": {},
              "uuid": "d9f8b854-d6bd-4126-bb0f-4a624c3cf56d",
              "parentUUID": "9eea4b28-07da-4b8b-b86e-9da4f3edc2cd",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should be typed as an array of strings",
              "fullTitle": "Passing Type Argument Should be typed as an array of strings",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const guitaristsAsArray = Array.from(guitarists);\nexpect(guitaristsAsArray).to.deep.equal(['Jimi Hendrix', 'Eric Clapton', 2]);\n//   type tests = [expect <Equal<typeof guitaristsAsArray, string[]>>];",
              "err": {},
              "uuid": "8ff937b6-b5ac-4bb5-b76f-a9300f90a58a",
              "parentUUID": "9eea4b28-07da-4b8b-b86e-9da4f3edc2cd",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "c9de6158-1067-4085-ac24-270d4b43b12c",
            "d9f8b854-d6bd-4126-bb0f-4a624c3cf56d",
            "8ff937b6-b5ac-4bb5-b76f-a9300f90a58a"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "5465b323-ef40-4a2f-807e-b39b9df3adcd",
          "title": "Assign dynamic keys to object",
          "fullFile": "/Users/alchem01/dev/tutorials/typescript/ts-tutorial/src/11-assigningdynamicKeysToObject.ts",
          "file": "/src/11-assigningdynamicKeysToObject.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Should add values to the cache",
              "fullTitle": "Assign dynamic keys to object Should add values to the cache",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const cache = createCache();\ncache.add('123', 'Matt');\nexpect(cache.cache['123']).to.be.equal('Matt');",
              "err": {},
              "uuid": "b50e5026-785a-4757-9915-33fd7f0ae114",
              "parentUUID": "5465b323-ef40-4a2f-807e-b39b9df3adcd",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should remove values from the cache",
              "fullTitle": "Assign dynamic keys to object Should remove values from the cache",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const cache = createCache();\ncache.add('123', 'Matt');\ncache.remove('123');\nexpect(cache.cache['123']).to.be.equal(undefined);",
              "err": {},
              "uuid": "d1a009a4-d1cf-418f-8305-322195948845",
              "parentUUID": "5465b323-ef40-4a2f-807e-b39b9df3adcd",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "b50e5026-785a-4757-9915-33fd7f0ae114",
            "d1a009a4-d1cf-418f-8305-322195948845"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "c647906d-7bdb-4c2b-8445-cbd577f0b0f5",
          "title": "Narrowing down union types",
          "fullFile": "/Users/alchem01/dev/tutorials/typescript/ts-tutorial/src/12-narrowingDownUnionTypes.ts",
          "file": "/src/12-narrowingDownUnionTypes.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Should return the amount when passed an object",
              "fullTitle": "Narrowing down union types Should return the amount when passed an object",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(coerceAmount({ amount: 20 })).to.be.equal(20);",
              "err": {},
              "uuid": "8747e0b7-b9dc-4da3-b5c8-cf8429c0942e",
              "parentUUID": "c647906d-7bdb-4c2b-8445-cbd577f0b0f5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should return the amount when passed a number",
              "fullTitle": "Narrowing down union types Should return the amount when passed a number",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(coerceAmount(20)).to.be.equal(20);",
              "err": {},
              "uuid": "1ca4aedd-1e80-4778-be24-ac0438b914ba",
              "parentUUID": "c647906d-7bdb-4c2b-8445-cbd577f0b0f5",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "8747e0b7-b9dc-4da3-b5c8-cf8429c0942e",
            "1ca4aedd-1e80-4778-be24-ac0438b914ba"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "de645cf7-5ce6-4bed-b218-04d0c7509c6c",
          "title": "Coercing unknown types",
          "fullFile": "/Users/alchem01/dev/tutorials/typescript/ts-tutorial/src/13-typingErrorsInTryCatch.ts",
          "file": "/src/13-typingErrorsInTryCatch.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Should return the message when it fails",
              "fullTitle": "Coercing unknown types Should return the message when it fails",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(tryCatchDemo('fail')).to.be.equal('Failure!');",
              "err": {},
              "uuid": "d19d1a2f-4796-4b88-99ad-8bdee2a5d966",
              "parentUUID": "de645cf7-5ce6-4bed-b218-04d0c7509c6c",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "d19d1a2f-4796-4b88-99ad-8bdee2a5d966"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "028267f9-7079-4767-a8bd-b8d05a7cc9b0",
          "title": "Typing async function",
          "fullFile": "/Users/alchem01/dev/tutorials/typescript/ts-tutorial/src/18-typingAsyncFunction.ts",
          "file": "/src/18-typingAsyncFunction.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Should create the user, then get them",
              "fullTitle": "Typing async function Should create the user, then get them",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        const user = yield createThenGetUser(() => __awaiter(void 0, void 0, void 0, function* () { return '123'; }), (id) => __awaiter(void 0, void 0, void 0, function* () {\n            return ({\n                id,\n                firstName: 'Matt',\n                lastName: 'Pocock',\n            });\n        }));\n        expect(user).to.deep.equal({\n            id: '123',\n            firstName: 'Matt',\n            lastName: 'Pocock',\n        });\n    })",
              "err": {},
              "uuid": "7bba6334-ca6b-431c-baaf-df83c24bc035",
              "parentUUID": "028267f9-7079-4767-a8bd-b8d05a7cc9b0",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "7bba6334-ca6b-431c-baaf-df83c24bc035"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        }
      ],
      "passes": [
        "d5c847db-a3f9-42c0-925d-710707037253",
        "89d79904-1ebe-4af7-a1fb-31ea44f1f30f",
        "a1a0b5ab-c586-43de-9011-02c2cb42c79f",
        "6f14c555-2f5c-4979-b239-808080498d4e",
        "41747dbc-9851-4e65-b757-173bb40def36",
        "19bd0cd7-7837-4ce1-b072-cb03443c910f",
        "1662da3e-c313-43a9-8b2c-78efec1f8148",
        "bdff60bd-bdb2-4e38-a941-690777e93bc9",
        "87a1f6f6-59fd-4361-a026-6fcabc5bb5f2",
        "454e8c1c-8597-4ce6-bb84-8d469b621303",
        "bd4047c5-b78e-4d06-a910-3f9519637dcd"
      ],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 2,
      "root": true,
      "rootEmpty": false,
      "_timeout": 10000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.2.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "api-test-report",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "reportDir": "__test-report__",
        "reportFilename": "api-test-report",
        "reportTitle": "API-Test-Report",
        "inlineAssets": "true"
      },
      "version": "6.2.0"
    }
  }
}