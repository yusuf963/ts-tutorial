{
  "stats": {
    "suites": 1,
    "tests": 18,
    "passes": 18,
    "pending": 0,
    "failures": 0,
    "start": "2023-01-06T11:05:49.226Z",
    "end": "2023-01-06T11:05:49.232Z",
    "duration": 6,
    "testsRegistered": 18,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "53f65b33-d705-4fa3-9247-41731972f2d2",
      "title": "",
      "fullFile": "/Users/alchem01/dev/tutorials/typescript/ts-tutorial/src/passingTypeArguments.ts",
      "file": "/src/passingTypeArguments.ts",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [
        {
          "title": "Should get the user id",
          "fullTitle": "Should get the user id",
          "timedOut": false,
          "duration": 0,
          "state": "passed",
          "speed": "fast",
          "pass": true,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "expect(getUserId(defaultUser)).to.deep.equal(1);",
          "err": {},
          "uuid": "6ceb182e-ef7e-45ad-b7f6-1c13a7654aed",
          "parentUUID": "53f65b33-d705-4fa3-9247-41731972f2d2",
          "isHook": false,
          "skipped": false
        },
        {
          "title": "Should user has property of lastName",
          "fullTitle": "Should user has property of lastName",
          "timedOut": false,
          "duration": 1,
          "state": "passed",
          "speed": "fast",
          "pass": true,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "expect(user).to.have.property(\"lastName\");",
          "err": {},
          "uuid": "59cbd2b3-4583-4883-a3f8-536289c26885",
          "parentUUID": "53f65b33-d705-4fa3-9247-41731972f2d2",
          "isHook": false,
          "skipped": false
        },
        {
          "title": "Should return a valid user",
          "fullTitle": "Should return a valid user",
          "timedOut": false,
          "duration": 0,
          "state": "passed",
          "speed": "fast",
          "pass": true,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "expect(user.id).to.be.a(\"number\");\nexpect(user.firstName).to.be.a(\"string\");\nexpect(user.lastName).to.be.a(\"string\");\nexpect(user.role).to.be.oneOf([\"super-admin\", \"admin\", \"user\", \"dw\"]);\nexpect(user.posts[0].id).to.be.a(\"number\");\nexpect(user.posts[0].title).to.be.a(\"string\");",
          "err": {},
          "uuid": "2bdb5739-cf6e-4f63-9a14-799878e84bb0",
          "parentUUID": "53f65b33-d705-4fa3-9247-41731972f2d2",
          "isHook": false,
          "skipped": false
        },
        {
          "title": "Should return a valid user admin value",
          "fullTitle": "Should return a valid user admin value",
          "timedOut": false,
          "duration": 0,
          "state": "passed",
          "speed": "fast",
          "pass": true,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "expect(user.role).to.be.oneOf(['admin']);",
          "err": {},
          "uuid": "ad6d75e2-9556-45df-bd71-61bf901ff864",
          "parentUUID": "53f65b33-d705-4fa3-9247-41731972f2d2",
          "isHook": false,
          "skipped": false
        },
        {
          "title": "should add two numbers",
          "fullTitle": "should add two numbers",
          "timedOut": false,
          "duration": 0,
          "state": "passed",
          "speed": "fast",
          "pass": true,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "const result = addNum(2, 3);\nexpect(result).to.equal(5);",
          "err": {},
          "uuid": "e21897a0-ebf2-47f3-a21d-3c697348fa95",
          "parentUUID": "53f65b33-d705-4fa3-9247-41731972f2d2",
          "isHook": false,
          "skipped": false
        },
        {
          "title": "should add two objects",
          "fullTitle": "should add two objects",
          "timedOut": false,
          "duration": 0,
          "state": "passed",
          "speed": "fast",
          "pass": true,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "const result = addObject({ name: 'bob' }, { age: 22 });\nexpect(result).to.deep.equal({ name: 'bob', age: 22 });",
          "err": {},
          "uuid": "ffc33d1f-3a6f-445c-9335-71cf46fedc34",
          "parentUUID": "53f65b33-d705-4fa3-9247-41731972f2d2",
          "isHook": false,
          "skipped": false
        },
        {
          "title": "should add two arrays",
          "fullTitle": "should add two arrays",
          "timedOut": false,
          "duration": 0,
          "state": "passed",
          "speed": "fast",
          "pass": true,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "const result = joinArray2([1, 2], [3, 4]);\nexpect(result).to.deep.equal([1, 2, 3, 4]);",
          "err": {},
          "uuid": "0f459ddd-ff91-4a49-b887-a5180ba612a2",
          "parentUUID": "53f65b33-d705-4fa3-9247-41731972f2d2",
          "isHook": false,
          "skipped": false
        },
        {
          "title": "should return T type",
          "fullTitle": "should return T type",
          "timedOut": false,
          "duration": 1,
          "state": "passed",
          "speed": "fast",
          "pass": true,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "const result = joinArray2(['1', '2'], ['3', '4']);\nexpect(result).to.deep.equal(['1', '2', '3', '4']);",
          "err": {},
          "uuid": "e34251a5-2d6f-4e4a-925d-c0322912d1c1",
          "parentUUID": "53f65b33-d705-4fa3-9247-41731972f2d2",
          "isHook": false,
          "skipped": false
        },
        {
          "title": "should add two numbers",
          "fullTitle": "should add two numbers",
          "timedOut": false,
          "duration": 0,
          "state": "passed",
          "speed": "fast",
          "pass": true,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "const result = addTwoNumber({ first: 1, second: 2 });\nexpect(result).to.equal(3);",
          "err": {},
          "uuid": "1e3695ad-f26c-454d-a49c-2e5d3f065be5",
          "parentUUID": "53f65b33-d705-4fa3-9247-41731972f2d2",
          "isHook": false,
          "skipped": false
        },
        {
          "title": "Should work with just the first name",
          "fullTitle": "Should work with just the first name",
          "timedOut": false,
          "duration": 0,
          "state": "passed",
          "speed": "fast",
          "pass": true,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "const name = getName(\"Matt\");\nexpect(name).to.deep.equal(\"Matt\");",
          "err": {},
          "uuid": "a369f0ae-2d65-403b-ac1d-d8467c72a606",
          "parentUUID": "53f65b33-d705-4fa3-9247-41731972f2d2",
          "isHook": false,
          "skipped": false
        },
        {
          "title": "Should work with the first and last name",
          "fullTitle": "Should work with the first and last name",
          "timedOut": false,
          "duration": 0,
          "state": "passed",
          "speed": "fast",
          "pass": true,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "const name = getName(\"Matt\", \"Pocock\");\nexpect(name).to.deep.equal(\"Matt Pocock\");",
          "err": {},
          "uuid": "4e8a8443-f8bc-44d1-bef7-3ce2c7996e5c",
          "parentUUID": "53f65b33-d705-4fa3-9247-41731972f2d2",
          "isHook": false,
          "skipped": false
        },
        {
          "title": "Should work with the first and last name and ..arg",
          "fullTitle": "Should work with the first and last name and ..arg",
          "timedOut": false,
          "duration": 0,
          "state": "passed",
          "speed": "fast",
          "pass": true,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "const name = getName(\"Matt\", \"Pocock\", \"a\", \"b\", \"c\");\nassert.equal(name, \"Matt Pocock a,b,c\");",
          "err": {},
          "uuid": "0ab8d830-5e5e-4136-84f6-fee36957fcab",
          "parentUUID": "53f65b33-d705-4fa3-9247-41731972f2d2",
          "isHook": false,
          "skipped": false
        },
        {
          "title": "Should work with just the first name",
          "fullTitle": "Should work with just the first name",
          "timedOut": false,
          "duration": 0,
          "state": "passed",
          "speed": "fast",
          "pass": true,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "const name = getName({\n    first: \"Matt\",\n});\nexpect(name).to.equal(\"Matt\");",
          "err": {},
          "uuid": "e67f8d84-7c16-47f2-bcb5-6aa02b577261",
          "parentUUID": "53f65b33-d705-4fa3-9247-41731972f2d2",
          "isHook": false,
          "skipped": false
        },
        {
          "title": "Should work with the first and last name",
          "fullTitle": "Should work with the first and last name",
          "timedOut": false,
          "duration": 0,
          "state": "passed",
          "speed": "fast",
          "pass": true,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "const name = getName({\n    first: \"Matt\",\n    last: \"Pocock\",\n});\nexpect(name).to.equal(\"Matt Pocock\");",
          "err": {},
          "uuid": "af673c4c-4949-41ac-99c6-df15ef713681",
          "parentUUID": "53f65b33-d705-4fa3-9247-41731972f2d2",
          "isHook": false,
          "skipped": false
        },
        {
          "title": "Should work with the first and last name using assert ",
          "fullTitle": "Should work with the first and last name using assert ",
          "timedOut": false,
          "duration": 0,
          "state": "passed",
          "speed": "fast",
          "pass": true,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "const name = getNameY({\n    first: \"Matt\",\n    last: \"Pocock\",\n});\nassert.equal(name, \"Matt Pocock\");",
          "err": {},
          "uuid": "11dbb170-0d35-4a8f-8dd4-94de8de35e59",
          "parentUUID": "53f65b33-d705-4fa3-9247-41731972f2d2",
          "isHook": false,
          "skipped": false
        }
      ],
      "suites": [
        {
          "uuid": "d9ca5117-2a1d-431f-90ef-c5841d4f2e31",
          "title": "Passing Type Argument",
          "fullFile": "/Users/alchem01/dev/tutorials/typescript/ts-tutorial/src/passingTypeArguments.ts",
          "file": "/src/passingTypeArguments.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Should contain Jimi and Eric",
              "fullTitle": "Passing Type Argument Should contain Jimi and Eric",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(guitarists.has(\"Jimi Hendrix\")).to.equal(true);\nexpect(guitarists.has(\"Eric Clapton\")).to.equal(true);",
              "err": {},
              "uuid": "398fef0c-62d9-40c7-8af6-f723d0e15296",
              "parentUUID": "d9ca5117-2a1d-431f-90ef-c5841d4f2e31",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should give a type error when you try to pass a non-string",
              "fullTitle": "Passing Type Argument Should give a type error when you try to pass a non-string",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "/*  // @ts-expect-error */\nguitarists.add(2);\nexpect(guitarists.has(2)).to.equal(true);",
              "err": {},
              "uuid": "134e0de9-69de-4471-b62b-037d707434ca",
              "parentUUID": "d9ca5117-2a1d-431f-90ef-c5841d4f2e31",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should be typed as an array of strings",
              "fullTitle": "Passing Type Argument Should be typed as an array of strings",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const guitaristsAsArray = Array.from(guitarists);\nexpect(guitaristsAsArray).to.deep.equal([\n    \"Jimi Hendrix\",\n    \"Eric Clapton\",\n    2,\n]);\n//   type tests = [expect <Equal<typeof guitaristsAsArray, string[]>>];",
              "err": {},
              "uuid": "f2997cb1-d13b-4d1f-a160-d440ab27332f",
              "parentUUID": "d9ca5117-2a1d-431f-90ef-c5841d4f2e31",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "398fef0c-62d9-40c7-8af6-f723d0e15296",
            "134e0de9-69de-4471-b62b-037d707434ca",
            "f2997cb1-d13b-4d1f-a160-d440ab27332f"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        }
      ],
      "passes": [
        "6ceb182e-ef7e-45ad-b7f6-1c13a7654aed",
        "59cbd2b3-4583-4883-a3f8-536289c26885",
        "2bdb5739-cf6e-4f63-9a14-799878e84bb0",
        "ad6d75e2-9556-45df-bd71-61bf901ff864",
        "e21897a0-ebf2-47f3-a21d-3c697348fa95",
        "ffc33d1f-3a6f-445c-9335-71cf46fedc34",
        "0f459ddd-ff91-4a49-b887-a5180ba612a2",
        "e34251a5-2d6f-4e4a-925d-c0322912d1c1",
        "1e3695ad-f26c-454d-a49c-2e5d3f065be5",
        "a369f0ae-2d65-403b-ac1d-d8467c72a606",
        "4e8a8443-f8bc-44d1-bef7-3ce2c7996e5c",
        "0ab8d830-5e5e-4136-84f6-fee36957fcab",
        "e67f8d84-7c16-47f2-bcb5-6aa02b577261",
        "af673c4c-4949-41ac-99c6-df15ef713681",
        "11dbb170-0d35-4a8f-8dd4-94de8de35e59"
      ],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 2,
      "root": true,
      "rootEmpty": false,
      "_timeout": 10000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.2.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "api-test-report",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "reportDir": "__test-report__",
        "reportFilename": "api-test-report",
        "reportTitle": "API-Test-Report",
        "inlineAssets": "true"
      },
      "version": "6.2.0"
    }
  }
}